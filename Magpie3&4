import java.util.Scanner;

/**
 * A simple class to run the Magpie class.
 * @author Laurie White
 * @version April 2012
 */
public class MagpieRunner
{

    /**
     * Create a Magpie, give it user input, and print its replies.
     */
    public static void main(String[] args)
    {
        Magpie4 maggie = new Magpie4();

        System.out.println (maggie.getGreeting());
        Scanner in = new Scanner (System.in);
        String statement = in.nextLine();

        while (!statement.equals("Bye"))
        {
            System.out.println (maggie.getResponse(statement));
            statement = in.nextLine();
        }
    }
}







/**
 * A program to carry on conversations with a human user.
 * This version:
 * <ul><li>
 * Uses advanced search for keywords
 * </li></ul>
 *
 * @author Laurie White
 * @version April 2012
 */
public class Magpie3
{
    /**
     * Get a default greeting
     *
     * @return a greeting
     */
    public String getGreeting()
    {
        return "Hello, let's talk.";
    }

    /**
     * Gives a response to a user statement
     *
     * @param statement
     * the user statement
     * @return a response based on the rules given
     */
    public String getResponse(String statement)
    {
        String response = "";
        if (findKeyword(statement, "no") >= 0)
        {
            response = "Why so negative?";
        }
        else if (findKeyword(statement, "mother") >= 0)
        {
            response = "Tell me more about your family.";
        }
        else if (findKeyword(statement, "sad") >= 0)
        {
            response = "Im sorry to hear about that.";
        }
        else if (findKeyword(statement, "hungry") >= 0)
        {
            response = "let's go get some food then";
        }
        else if (findKeyword(statement, "why") >= 0)
        {
            response = "beacuse, why not?";
        }
        else if (findKeyword(statement, "family") >= 0)
        {
            response = "oh wow, they sound interesting";
        }
        else
        {
            response = getRandomResponse();
        }
        return response;
    }

    /**
     * Search for one word in phrase. The search is not case
     * sensitive. This method will check that the given goal
     * is not a substring of a longer string (so, for
     * example, "I know" does not contain "no").
     *
     * @param statement
     * the string to search
     * @param goal
     * the string to search for
     * @param startPos
     * the character of the string to begin the
     * search at
     * @return the index of the first occurrence of goal in
     * statement or -1 if it's not found
     */
    private int findKeyword(String statement, String goal,
    int startPos)
    {
        String phrase = statement.trim().toLowerCase();
        goal = goal.toLowerCase();
        int index = statement.indexOf(goal);
        
        
        boolean front = false;
        boolean back = false;
        
        
       
        index = statement.indexOf(goal);
        
        while(index > -1)
      {
          //System.out.println("\t"+index);
        //String startLett = statement.substring(index-1, index);
         
         
         
        /*  
        if( startLett.equals(" "))
            {
            front = true;
            }
            
        int lastIndex = goal.length() + index;
        
        
        
        if( finishLett.equals(" "))
            {
            back = true;
            }
        */
       
       
       
       int lastIndex = goal.length() + index;
       if( lastIndex == statement.length())
       {
        back= true;
        }
        else
        {
        String finishLett = statement.substring(lastIndex, lastIndex+1);
        }
        if( index == 0)
            {
            front = true;
            }
        else
        {
        if (front == true && back == true)
            {
            
                return index;
                
           
            }
        // Your code goes here
        }
        index = statement.indexOf(goal, index+1);
      }
      return -1;
    }
 
    

    /**
     * Search for one word in phrase. The search is not case
     * sensitive. This method will check that the given goal
     * is not a substring of a longer string (so, for
     * example, "I know" does not contain "no"). The search
     * begins at the beginning of the string.
     *
     * @param statement
     * the string to search
     * @param goal
     * the string to search for
     * @return the index of the first occurrence of goal in
     * statement or -1 if it's not found
     */
    private int findKeyword(String statement, String goal)
    {
        return findKeyword(statement, goal, 0);
    }

    /**
     * Pick a default response to use if nothing else fits.
     *
     * @return a non-committal string
     */
    private String getRandomResponse()
    {
        final int NUMBER_OF_RESPONSES = 7;
        double r = Math.random();
        int whichResponse = (int) (r * NUMBER_OF_RESPONSES);
        String response = "";

        if (whichResponse == 0)
        {
            response = "Interesting, tell me more.";
        }
        else if (whichResponse == 1)
        {
            response = "Hmmm.";
        }
        else if (whichResponse == 2)
        {
            response = "Do you really think so?";
        }
        else if (whichResponse == 3)
        {
            response = "You don't say.";
        }
        else if (whichResponse == 4)
        {
            response = "wow, I did not know that!";
        }
        else if (whichResponse == 5)
        {
            response = "whhhat? Thats crazy!";
        }
        else if (whichResponse == 6)
        {
            response = "if you really feel that way.";
        }
        return response;
    }

}





    /**
     * A program to carry on conversations with a human user.
     * This version:
     * <ul><li>
     * Uses advanced search for keywords
     * </li></ul>
     *
     * @author Laurie White
     * @version April 2012
     */
    public class Magpie4
    {
        /**
         * Get a default greeting
         *
         * @return a greeting
         */
        public String getGreeting()
        {
            return "Hello, let's talk.";
        }
    
        /**
         * Gives a response to a user statement
         *
         * @param statement
         * the user statement
         * @return a response based on the rules given
         */
        public String getResponse(String statement)
        {
            String response = "";
            if (findKeyword(statement, "no") >= 0)
            {
                response = "Why so negative?";
            }
            else if (findKeyword(statement, "mother") >= 0)
            {
                response = "Tell me more about your family.";
            }
            else if (findKeyword(statement, "wow") >= 0)
            {
                response = "wow, wow, wow";
            }
            else
            {
                response = getRandomResponse();
            }
            return response;
        }
    
        /**
         * Search for one word in phrase. The search is not case
         * sensitive. This method will check that the given goal
         * is not a substring of a longer string (so, for
         * example, "I know" does not contain "no").
         *
         * @param statement
         * the string to search
         * @param goal
         * the string to search for
         * @param startPos
         * the character of the string to begin the
         * search at
         * @return the index of the first occurrence of goal in
         * statement or -1 if it's not found
         */
        private int findKeyword(String statement, String goal,
        int startPos)
        {
            String phrase = statement.trim().toLowerCase();
            goal = goal.toLowerCase();
            int let = goal.length(); 
            
            int index = statement.indexOf(goal);
            
            
            boolean front = false;
            boolean back = false;
            
            
           
          
          int lastIndex = goal.length() + index;
          int finishLett = goal.length() + index;
          //String finishLett = statement.substring(lastIndex, lastIndex+1);
            while(index != -1)
          {
           if( lastIndex == statement.length())
           {
            back = true;
            }
            else
            {
            
            //  if ( finishLett.equals(" "))
            {
                back = true;
            }
            
            
            
            
            
        
            if (front == true && back == true )
            {
                return index;
            }
            index = statement.indexOf(goal, index+1);
          }
          return -1;
        }
     
        
    }
        /**
         * Search for one word in phrase. The search is not case
         * sensitive. This method will check that the given goal
         * is not a substring of a longer string (so, for
         * example, "I know" does not contain "no"). The search
         * begins at the beginning of the string.
         *
         * @param statement
         * the string to search
         * @param goal
         * the string to search for
         * @return the index of the first occurrence of goal in
         * statement or -1 if it's not found
         */
    /*
    private int findKeyword(String s, String g)
    {
        return findKeyword(s, g, 0);
    }

    /**
     * Pick a default response to use if nothing else fits.
     *
     * @return a non-committal string
     */
    private String getRandomResponse()
    {
        final int numRes = 4;
        double r = Math.random();
        int whichResponse = (int) (r * numRes);
        String response = "";

        if (whichResponse == 0)
        {
            response = "Interesting, tell me more.";
        }
        else if (whichResponse == 1)
        {
            response = "Hmmm.";
        }
        else if (whichResponse == 2)
        {
            response = "Do you really think so?";
        }
        else if (whichResponse == 3)
        {
            response = "You don't say.";
        }

        return response;
    }

}
